// FBInk is licenced under the GPL3 licence

// WARNING: This file has automatically been generated on Sun, 13 Oct 2019 21:08:31 NZDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package fbink

/*
#cgo LDFLAGS: -L${SRCDIR}/../../Release -lfbink -lm
#include "../../fbink.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Version function as declared in FBInk/fbink.h:339
func Version() string {
	__ret := C.fbink_version()
	__v := packPCharString(__ret)
	return __v
}

// Open function as declared in FBInk/fbink.h:344
func Open() int32 {
	__ret := C.fbink_open()
	__v := (int32)(__ret)
	return __v
}

// Close function as declared in FBInk/fbink.h:350
func Close(Fbfd int32) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	__ret := C.fbink_close(cFbfd)
	__v := (int32)(__ret)
	return __v
}

// Init function as declared in FBInk/fbink.h:376
func Init(Fbfd int32, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_init(cFbfd, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// StateDump function as declared in FBInk/fbink.h:380
func StateDump(FbinkCfg *Fbinkconfig) {
	cFbinkCfg, _ := FbinkCfg.PassRef()
	C.fbink_state_dump(cFbinkCfg)
}

// GetState function as declared in FBInk/fbink.h:385
func GetState(FbinkCfg *Fbinkconfig, FbinkState *Fbinkstate) {
	cFbinkCfg, _ := FbinkCfg.PassRef()
	cFbinkState, _ := FbinkState.PassRef()
	C.fbink_get_state(cFbinkCfg, cFbinkState)
}

// Print function as declared in FBInk/fbink.h:402
func Print(Fbfd int32, String string, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	String = safeString(String)
	cString, _ := unpackPCharString(String)
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_print(cFbfd, cString, cFbinkCfg)
	runtime.KeepAlive(String)
	__v := (int32)(__ret)
	return __v
}

// AddOtFont function as declared in FBInk/fbink.h:416
func AddOtFont(Filename string, Style FontStyleT) int32 {
	Filename = safeString(Filename)
	cFilename, _ := unpackPCharString(Filename)
	cStyle, _ := (C.FONT_STYLE_T)(Style), cgoAllocsUnknown
	__ret := C.fbink_add_ot_font(cFilename, cStyle)
	runtime.KeepAlive(Filename)
	__v := (int32)(__ret)
	return __v
}

// FreeOtFonts function as declared in FBInk/fbink.h:419
func FreeOtFonts() int32 {
	__ret := C.fbink_free_ot_fonts()
	__v := (int32)(__ret)
	return __v
}

// PrintOt function as declared in FBInk/fbink.h:454
func PrintOt(Fbfd int32, String string, Cfg *Fbinkotconfig, FbinkCfg *Fbinkconfig, Fit *Fbinkotfit) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	String = safeString(String)
	cString, _ := unpackPCharString(String)
	cCfg, _ := Cfg.PassRef()
	cFbinkCfg, _ := FbinkCfg.PassRef()
	cFit, _ := Fit.PassRef()
	__ret := C.fbink_print_ot(cFbfd, cString, cCfg, cFbinkCfg, cFit)
	runtime.KeepAlive(String)
	__v := (int32)(__ret)
	return __v
}

// Refresh function as declared in FBInk/fbink.h:496
func Refresh(Fbfd int32, RegionTop uint32, RegionLeft uint32, RegionWidth uint32, RegionHeight uint32, DitheringMode byte, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cRegionTop, _ := (C.uint32_t)(RegionTop), cgoAllocsUnknown
	cRegionLeft, _ := (C.uint32_t)(RegionLeft), cgoAllocsUnknown
	cRegionWidth, _ := (C.uint32_t)(RegionWidth), cgoAllocsUnknown
	cRegionHeight, _ := (C.uint32_t)(RegionHeight), cgoAllocsUnknown
	cDitheringMode, _ := (C.uint8_t)(DitheringMode), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_refresh(cFbfd, cRegionTop, cRegionLeft, cRegionWidth, cRegionHeight, cDitheringMode, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// WaitForSubmission function as declared in FBInk/fbink.h:514
func WaitForSubmission(Fbfd int32, Marker uint32) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cMarker, _ := (C.uint32_t)(Marker), cgoAllocsUnknown
	__ret := C.fbink_wait_for_submission(cFbfd, cMarker)
	__v := (int32)(__ret)
	return __v
}

// WaitForComplete function as declared in FBInk/fbink.h:525
func WaitForComplete(Fbfd int32, Marker uint32) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cMarker, _ := (C.uint32_t)(Marker), cgoAllocsUnknown
	__ret := C.fbink_wait_for_complete(cFbfd, cMarker)
	__v := (int32)(__ret)
	return __v
}

// GetLastMarker function as declared in FBInk/fbink.h:559
func GetLastMarker() uint32 {
	__ret := C.fbink_get_last_marker()
	__v := (uint32)(__ret)
	return __v
}

// Reinit function as declared in FBInk/fbink.h:590
func Reinit(Fbfd int32, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_reinit(cFbfd, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// PrintProgressBar function as declared in FBInk/fbink.h:599
func PrintProgressBar(Fbfd int32, Percentage byte, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cPercentage, _ := (C.uint8_t)(Percentage), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_print_progress_bar(cFbfd, cPercentage, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// PrintActivityBar function as declared in FBInk/fbink.h:607
func PrintActivityBar(Fbfd int32, Progress byte, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cProgress, _ := (C.uint8_t)(Progress), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_print_activity_bar(cFbfd, cProgress, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// PrintImage function as declared in FBInk/fbink.h:637
func PrintImage(Fbfd int32, Filename string, XOff int16, YOff int16, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	Filename = safeString(Filename)
	cFilename, _ := unpackPCharString(Filename)
	cXOff, _ := (C.short)(XOff), cgoAllocsUnknown
	cYOff, _ := (C.short)(YOff), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_print_image(cFbfd, cFilename, cXOff, cYOff, cFbinkCfg)
	runtime.KeepAlive(Filename)
	__v := (int32)(__ret)
	return __v
}

// PrintRawData function as declared in FBInk/fbink.h:666
func PrintRawData(Fbfd int32, Data *byte, W int32, H int32, Len uint, XOff int16, YOff int16, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cData, _ := (*C.uchar)(unsafe.Pointer(Data)), cgoAllocsUnknown
	cW, _ := (C.int)(W), cgoAllocsUnknown
	cH, _ := (C.int)(H), cgoAllocsUnknown
	cLen, _ := (C.size_t)(Len), cgoAllocsUnknown
	cXOff, _ := (C.short)(XOff), cgoAllocsUnknown
	cYOff, _ := (C.short)(YOff), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_print_raw_data(cFbfd, cData, cW, cH, cLen, cXOff, cYOff, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// Cls function as declared in FBInk/fbink.h:681
func Cls(Fbfd int32, FbinkCfg *Fbinkconfig) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	__ret := C.fbink_cls(cFbfd, cFbinkCfg)
	__v := (int32)(__ret)
	return __v
}

// Dump function as declared in FBInk/fbink.h:701
func Dump(Fbfd int32, Dump *Fbinkdump) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cDump, _ := Dump.PassRef()
	__ret := C.fbink_dump(cFbfd, cDump)
	__v := (int32)(__ret)
	return __v
}

// RegionDump function as declared in FBInk/fbink.h:714
func RegionDump(Fbfd int32, XOff int16, YOff int16, W uint16, H uint16, FbinkCfg *Fbinkconfig, Dump *Fbinkdump) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cXOff, _ := (C.short)(XOff), cgoAllocsUnknown
	cYOff, _ := (C.short)(YOff), cgoAllocsUnknown
	cW, _ := (C.ushort)(W), cgoAllocsUnknown
	cH, _ := (C.ushort)(H), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	cDump, _ := Dump.PassRef()
	__ret := C.fbink_region_dump(cFbfd, cXOff, cYOff, cW, cH, cFbinkCfg, cDump)
	__v := (int32)(__ret)
	return __v
}

// Restore function as declared in FBInk/fbink.h:750
func Restore(Fbfd int32, FbinkCfg *Fbinkconfig, Dump *Fbinkdump) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cFbinkCfg, _ := FbinkCfg.PassRef()
	cDump, _ := Dump.PassRef()
	__ret := C.fbink_restore(cFbfd, cFbinkCfg, cDump)
	__v := (int32)(__ret)
	return __v
}

// FreeDumpData function as declared in FBInk/fbink.h:760
func FreeDumpData(Dump *Fbinkdump) int32 {
	cDump, _ := Dump.PassRef()
	__ret := C.fbink_free_dump_data(cDump)
	__v := (int32)(__ret)
	return __v
}

// GetLastRect function as declared in FBInk/fbink.h:775
func GetLastRect() Fbinkrect {
	__ret := C.fbink_get_last_rect()
	__v := *NewFbinkrectRef(unsafe.Pointer(&__ret))
	return __v
}

// ButtonScan function as declared in FBInk/fbink.h:799
func ButtonScan(Fbfd int32, PressButton bool, Nosleep bool) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cPressButton, _ := (C._Bool)(PressButton), cgoAllocsUnknown
	cNosleep, _ := (C._Bool)(Nosleep), cgoAllocsUnknown
	__ret := C.fbink_button_scan(cFbfd, cPressButton, cNosleep)
	__v := (int32)(__ret)
	return __v
}

// WaitForUsbmsProcessing function as declared in FBInk/fbink.h:821
func WaitForUsbmsProcessing(Fbfd int32, ForceUnplug bool) int32 {
	cFbfd, _ := (C.int)(Fbfd), cgoAllocsUnknown
	cForceUnplug, _ := (C._Bool)(ForceUnplug), cgoAllocsUnknown
	__ret := C.fbink_wait_for_usbms_processing(cFbfd, cForceUnplug)
	__v := (int32)(__ret)
	return __v
}
